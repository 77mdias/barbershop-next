#!/bin/bash

# =====================================
# üöÄ SCRIPT DE DEPLOY PARA VERCEL
# =====================================

set -e  # Para em caso de erro

echo "üöÄ Iniciando processo de deploy para Vercel..."

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° na raiz do projeto
if [ ! -f "package.json" ]; then
    log_error "Execute este script na raiz do projeto!"
    exit 1
fi

# 1. Verificar depend√™ncias
log_info "Verificando depend√™ncias..."
if ! command -v vercel &> /dev/null; then
    log_warning "Vercel CLI n√£o encontrado. Instalando..."
    npm install -g vercel
fi

# 2. Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    log_warning "H√° mudan√ßas n√£o commitadas. Recomendamos commitar antes do deploy."
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "Deploy cancelado."
        exit 1
    fi
fi

# 3. Gerar Prisma Client
log_info "Gerando Prisma Client..."
npx prisma generate

# 4. Testar build localmente
log_info "Testando build local..."
npm run build

# 5. Fazer login no Vercel (se necess√°rio)
log_info "Verificando autentica√ß√£o Vercel..."
if ! vercel whoami &> /dev/null; then
    log_warning "Fa√ßa login no Vercel:"
    vercel login
fi

# 6. Deploy
log_info "Fazendo deploy..."
if [ "$1" = "--production" ]; then
    log_info "Deploy para PRODU√á√ÉO..."
    vercel --prod
else
    log_info "Deploy para PREVIEW..."
    vercel
fi

log_info "Deploy conclu√≠do! üéâ"
log_warning "N√£o esque√ßa de configurar as vari√°veis de ambiente no dashboard do Vercel!"

echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Acesse https://vercel.com/dashboard"
echo "2. Configure as vari√°veis de ambiente"
echo "3. Teste a aplica√ß√£o em produ√ß√£o"