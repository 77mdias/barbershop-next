{
  "Barbershop Component": {
    "prefix": "bbcomp",
    "body": [
      "import { cn } from '@/lib/utils'",
      "",
      "interface ${1:Component}Props {",
      "  className?: string",
      "  ${2:// Add props here}",
      "}",
      "",
      "export function ${1:Component}({ className, ...props }: ${1:Component}Props) {",
      "  return (",
      "    <div className={cn('${3:// Add default classes}', className)}>",
      "      ${4:// Component content}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Criar componente Barbershop com TypeScript"
  },

  "Barbershop Server Action": {
    "prefix": "bbaction",
    "body": [
      "'use server'",
      "",
      "import { revalidatePath } from 'next/cache'",
      "import { redirect } from 'next/navigation'",
      "import { db } from '@/lib/prisma'",
      "import { getServerSession } from 'next-auth'",
      "import { authOptions } from '@/lib/auth'",
      "",
      "export async function ${1:actionName}(${2:formData: FormData}) {",
      "  const session = await getServerSession(authOptions)",
      "  ",
      "  if (!session?.user) {",
      "    throw new Error('Unauthorized')",
      "  }",
      "",
      "  try {",
      "    ${3:// Server action logic}",
      "    ",
      "    revalidatePath('${4:/path}')",
      "    ${5:// redirect('/success') // Opcional}",
      "  } catch (error) {",
      "    console.error('Error in ${1:actionName}:', error)",
      "    throw new Error('${6:Operation failed}')",
      "  }",
      "}"
    ],
    "description": "Criar server action para Barbershop"
  },

  "Barbershop API Route": {
    "prefix": "bbapi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server'",
      "import { getServerSession } from 'next-auth'",
      "import { authOptions } from '@/lib/auth'",
      "import { db } from '@/lib/prisma'",
      "",
      "export async function ${1:GET}(request: NextRequest) {",
      "  try {",
      "    const session = await getServerSession(authOptions)",
      "    ",
      "    if (!session?.user) {",
      "      return NextResponse.json(",
      "        { error: 'Unauthorized' },",
      "        { status: 401 }",
      "      )",
      "    }",
      "",
      "    ${2:// API logic here}",
      "",
      "    return NextResponse.json({ ${3:data} })",
      "  } catch (error) {",
      "    console.error('API Error:', error)",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    )",
      "  }",
      "}"
    ],
    "description": "Criar rota de API para Barbershop"
  },

  "Barbershop Page Component": {
    "prefix": "bbpage",
    "body": [
      "import { Metadata } from 'next'",
      "import { getServerSession } from 'next-auth'",
      "import { authOptions } from '@/lib/auth'",
      "import { redirect } from 'next/navigation'",
      "",
      "export const metadata: Metadata = {",
      "  title: '${1:Page Title} | Barbershop',",
      "  description: '${2:Page description}'",
      "}",
      "",
      "export default async function ${3:Page}() {",
      "  const session = await getServerSession(authOptions)",
      "  ",
      "  ${4:// if (!session?.user) {",
      "  //   redirect('/auth/signin')",
      "  // }}",
      "",
      "  return (",
      "    <div className=\"container mx-auto px-4 py-8\">",
      "      <h1 className=\"text-3xl font-bold mb-6\">${1:Page Title}</h1>",
      "      ${5:// Page content}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Criar página Next.js para Barbershop"
  },

  "Barbershop Prisma Query": {
    "prefix": "bbquery",
    "body": [
      "const ${1:result} = await db.${2:model}.${3:findMany}({",
      "  ${4:where: {",
      "    // Add conditions",
      "  },}",
      "  ${5:include: {",
      "    // Add relations",
      "  },}",
      "  ${6:orderBy: {",
      "    createdAt: 'desc'",
      "  }}",
      "})"
    ],
    "description": "Query Prisma para Barbershop"
  },

  "Barbershop Form with Hook Form": {
    "prefix": "bbform",
    "body": [
      "import { useForm } from 'react-hook-form'",
      "import { zodResolver } from '@hookform/resolvers/zod'",
      "import { z } from 'zod'",
      "import { Button } from '@/components/ui/button'",
      "import { Input } from '@/components/ui/input'",
      "import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'",
      "",
      "const ${1:formSchema} = z.object({",
      "  ${2:name: z.string().min(1, 'Required')}",
      "})",
      "",
      "type ${3:FormData} = z.infer<typeof ${1:formSchema}>",
      "",
      "export function ${4:FormComponent}() {",
      "  const form = useForm<${3:FormData}>({",
      "    resolver: zodResolver(${1:formSchema}),",
      "    defaultValues: {",
      "      ${5:name: ''}",
      "    }",
      "  })",
      "",
      "  async function onSubmit(data: ${3:FormData}) {",
      "    ${6:// Handle form submission}",
      "  }",
      "",
      "  return (",
      "    <Form {...form}>",
      "      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">",
      "        <FormField",
      "          control={form.control}",
      "          name=\"${7:name}\"",
      "          render={({ field }) => (",
      "            <FormItem>",
      "              <FormLabel>${8:Label}</FormLabel>",
      "              <FormControl>",
      "                <Input placeholder=\"${9:placeholder}\" {...field} />",
      "              </FormControl>",
      "              <FormMessage />",
      "            </FormItem>",
      "          )}",
      "        />",
      "        <Button type=\"submit\" disabled={form.formState.isSubmitting}>",
      "          ${10:Submit}",
      "        </Button>",
      "      </form>",
      "    </Form>",
      "  )",
      "}"
    ],
    "description": "Formulário com React Hook Form para Barbershop"
  }
}
